buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://maven.parchmentmc.org' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.parchmentmc:librarian:1.+'
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
	}
}
plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = mod_base_package 
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: mappings_channel, version: mappings_version

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			// The markers can be changed as needed.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			// The markers can be changed as needed.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			// The markers can be changed as needed.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	mavenLocal()
	maven {
		name = '100Media'
		url = 'https://maven.100media.dev/'
	}
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"

	// Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
	config "${mod_id}.mixins.json"

	// Enables exporting mixin-changed classes to .mixin.out in the run folder
	debug.export = true
}
configurations {
	implementation.extendsFrom shadow
}
dependencies {

	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	// Mixin annotation processor - generates the refmap
	annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
	// Capability Syncer
	shadow fg.deobf("dev._100media.capabilitysyncer:capabilitysyncer:${capabilitysyncer_version}")
}

// This block of code expands all the gradle properties in the specified resource targets.
// It copies them into the targets and expands all the defined properties.
def resourceTargets = ["${mod_id}.mixins.json".toString()]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version,
		mod_authors: mod_authors, mod_description: mod_description,
		minecraft_version_range: minecraft_version_range, forge_version_range: forge_version_range,
		loader_version_range: loader_version_range]
processResources {
	inputs.properties replaceProperties
	replaceProperties.put 'project', project

	filesMatching(resourceTargets) {
		expand replaceProperties
	}

	intoTargets.each { target ->
		if (file(target).exists()) {
			copy {
				from(sourceSets.main.resources) {
					include resourceTargets
					expand replaceProperties
				}
				into target
			}
		}
	}
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
				"Specification-Title": mod_id,
				"Specification-Vendor": mod_authors,
				"Specification-Version": '1', // We are version 1 of ourselves
				"Implementation-Title": project.name,
				"Implementation-Version": mod_version,
				"Implementation-Vendor": mod_authors,
				"Implementation-Timestamp": new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
		])
	}
}

def relocateTargets = ['dev._100media.capabilitysyncer']
shadowJar {
	archiveClassifier = ''
	configurations = [project.configurations.shadow]
	relocateTargets.forEach {
		relocate it, "${project.group}.relocated.$it"
	}
	finalizedBy 'reobfShadowJar'
}

artifacts {
	shadowJar
}

reobf {
	shadowJar {}
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact shadowJar
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}
